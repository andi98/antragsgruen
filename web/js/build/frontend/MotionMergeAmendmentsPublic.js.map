{"version":3,"sources":["frontend/MotionMergeAmendmentsPublic.ts"],"names":["MotionMergeAmendmentsPublic","$widget","this","interval","initUpdateWidget","prototype","showUpdated","$updated","$updateWidget","find","addClass","window","setTimeout","removeClass","reload","showMsg","_this","$","get","updateUrl","data","success","$draftContent","html","$dateField","text","date","alert","error","startInterval","setInterval","bind","stopInterval","clearInterval","$toggle","localStorage","state","getItem","prop","change","active","setItem","trigger","click","exports"],"mappings":"yGAOA,IAAAA,EAAA,WAOI,SAAAA,EAAmBC,GAAAC,KAAAD,QAAAA,EAFXC,KAAAC,SAAmB,KAGvBD,KAAKE,mBAmEb,OAhEYJ,EAAAK,UAAAC,YAAR,WACI,IAAIC,EAAWL,KAAKM,cAAcC,KAAK,YACvCF,EAASG,SAAS,UAClBC,OAAOC,WAAW,WACdL,EAASM,YAAY,WACtB,MAGCb,EAAAK,UAAAS,OAAR,SAAeC,GAAf,IAAAC,EAAAd,KACIe,EAAEC,IAAIhB,KAAKiB,UAAW,SAACC,GACdA,EAAKC,SAIVL,EAAKM,cAAcC,KAAKH,EAAKG,MAC7BP,EAAKQ,WAAWC,KAAKL,EAAKM,MACtBX,GACAC,EAAKV,eANLqB,MAAMP,EAAKQ,UAWf5B,EAAAK,UAAAwB,cAAR,WAC0B,OAAlB3B,KAAKC,WAGTD,KAAKC,SAAWQ,OAAOmB,YAAY5B,KAAKY,OAAOiB,KAAK7B,MAAM,GAAQ,OAG9DF,EAAAK,UAAA2B,aAAR,WAC0B,OAAlB9B,KAAKC,WAGTQ,OAAOsB,cAAc/B,KAAKC,UAC1BD,KAAKC,SAAW,OAGZH,EAAAK,UAAAD,iBAAR,WAAA,IAAAY,EAAAd,KACIA,KAAKM,cAAgBN,KAAKD,QAAQQ,KAAK,uBACvCP,KAAKoB,cAAgBpB,KAAKD,QAAQQ,KAAK,iBACvCP,KAAKsB,WAAatB,KAAKD,QAAQQ,KAAK,mBACpCP,KAAKiB,UAAYjB,KAAKD,QAAQmB,KAAK,cAEnC,IAAIc,EAAUhC,KAAKM,cAAcC,KAAK,qBACtC,GAAI0B,aAAc,CACd,IAAIC,EAAQD,aAAaE,QAAQ,6BACnB,OAAVD,GACAF,EAAQI,KAAK,UAAqB,KAATF,GAGjCF,EAAQK,OAAO,WACX,IAAIC,EAAkBN,EAAQI,KAAK,WAC/BH,cACAA,aAAaM,QAAQ,4BAA8BD,EAAS,IAAM,KAElEA,EACAxB,EAAKa,gBAELb,EAAKgB,iBAEVU,QAAQ,UAEXxC,KAAKM,cAAcC,KAAK,cAAckC,MAAMzC,KAAKY,OAAOiB,KAAK7B,MAAM,KAE3EF,EA3EA,GAAa4C,EAAA5C,4BAAAA","file":"MotionMergeAmendmentsPublic.js","sourcesContent":["interface ReloadResult {\n    success: boolean;\n    error?: string;\n    html?: string;\n    date?: string;\n}\n\nexport class MotionMergeAmendmentsPublic {\n    private $updateWidget: JQuery;\n    private updateUrl: string;\n    private $draftContent: JQuery;\n    private $dateField: JQuery;\n    private interval: number = null;\n\n    constructor(public $widget: JQuery) {\n        this.initUpdateWidget();\n    }\n\n    private showUpdated() {\n        let $updated = this.$updateWidget.find('.updated');\n        $updated.addClass('active');\n        window.setTimeout(() => {\n            $updated.removeClass('active');\n        }, 2000);\n    }\n\n    private reload(showMsg: boolean) {\n        $.get(this.updateUrl, (data: ReloadResult) => {\n            if (!data.success) {\n                alert(data.error);\n                return;\n            }\n            this.$draftContent.html(data.html);\n            this.$dateField.text(data.date);\n            if (showMsg) {\n                this.showUpdated();\n            }\n        });\n    }\n\n    private startInterval() {\n        if (this.interval !== null) {\n            return;\n        }\n        this.interval = window.setInterval(this.reload.bind(this, false), 5000);\n    }\n\n    private stopInterval() {\n        if (this.interval === null) {\n            return;\n        }\n        window.clearInterval(this.interval);\n        this.interval = null;\n    }\n\n    private initUpdateWidget() {\n        this.$updateWidget = this.$widget.find('.motionUpdateWidget');\n        this.$draftContent = this.$widget.find('.draftContent');\n        this.$dateField = this.$widget.find('.mergeDraftDate');\n        this.updateUrl = this.$widget.data('reload-url');\n\n        let $toggle = this.$updateWidget.find('#autoUpdateToggle');\n        if (localStorage) {\n            let state = localStorage.getItem('merging-draft-auto-update');\n            if (state !== null) {\n                $toggle.prop('checked', (state == '1'));\n            }\n        }\n        $toggle.change(() => {\n            let active: boolean = $toggle.prop('checked');\n            if (localStorage) {\n                localStorage.setItem('merging-draft-auto-update', (active ? '1' : '0'));\n            }\n            if (active) {\n                this.startInterval();\n            } else {\n                this.stopInterval();\n            }\n        }).trigger('change');\n\n        this.$updateWidget.find('#updateBtn').click(this.reload.bind(this, true));\n    }\n}\n"]}